from typing import Any, Awaitable, Callable, Dict

from aiogram import BaseMiddleware
from aiogram.dispatcher.flags import get_flag
from aiogram.types import Message
from cachetools import TTLCache


class ThrottlingMiddleware(BaseMiddleware):
    """
    –ú–∏–¥–ª–≤–∞—Ä–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """

    caches = {
        "default": {
            "cache": TTLCache(maxsize=10_000, ttl=2),
            "text": "ü•µ –ù–µ –ø–∏—à–∏—Ç–µ —Ç–∞–∫ —á–∞—Å—Ç–æ!",
        },
        "callback": {
            "cache": TTLCache(maxsize=10_000, ttl=5),
            "text": "ü•µ –ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ!",
        },
    }

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any],
    ) -> Any:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º.

        :param handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞.
        :type handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]]
        :param event: –°–æ–±—ã—Ç–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
        :type event: aiogram.types.Message
        :param data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        :type data: Dict[str, Any]
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        :rtype: Any
        """
        throttling_key = get_flag(data, "throttling_key")
        if throttling_key is not None and throttling_key in self.caches:
            throttling = self.caches[throttling_key]
            if event.from_user.id in throttling["cache"]:
                text = throttling["text"]
                await event.answer(text)
                return
            else:
                throttling["cache"][event.from_user.id] = None
        return await handler(event, data)
